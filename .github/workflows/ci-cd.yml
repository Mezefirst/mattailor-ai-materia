name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Lint
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Deploy to Railway (staging)
  deploy-railway-staging:
    name: Deploy to Railway (Staging)
    runs-on: ubuntu-latest
    needs: [build-and-push, container-scan]
    if: github.ref == 'refs/heads/develop' && secrets.RAILWAY_TOKEN != ''
    environment:
      name: staging
      url: https://staging.mattailor.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment staging
          railway up --service mattailor-frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Deploy to AWS ECS (staging)
  deploy-aws-staging:
    name: Deploy to AWS ECS (Staging)
    runs-on: ubuntu-latest
    needs: [build-and-push, container-scan]
    if: github.ref == 'refs/heads/develop' && secrets.AWS_ACCESS_KEY_ID != ''
    environment:
      name: staging
      url: https://staging.mattailor.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME || 'mattailor-staging' }} \
            --service ${{ secrets.ECS_SERVICE_NAME || 'mattailor-frontend' }} \
            --force-new-deployment

  # Deploy to GCP Cloud Run (staging)
  deploy-gcp-staging:
    name: Deploy to GCP Cloud Run (Staging)
    runs-on: ubuntu-latest
    needs: [build-and-push, container-scan]
    if: github.ref == 'refs/heads/develop' && secrets.GCP_SA_KEY != ''
    environment:
      name: staging
      url: https://staging.mattailor.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy mattailor-frontend \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated

  # Deploy to production (Railway)
  deploy-railway-production:
    name: Deploy to Railway (Production)
    runs-on: ubuntu-latest
    needs: [build-and-push, container-scan]
    if: github.event_name == 'release' && secrets.RAILWAY_TOKEN != ''
    environment:
      name: production
      url: https://mattailor.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway environment production
          railway up --service mattailor-frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Deploy to AWS ECS (production)
  deploy-aws-production:
    name: Deploy to AWS ECS (Production)
    runs-on: ubuntu-latest
    needs: [build-and-push, container-scan]
    if: github.event_name == 'release' && secrets.AWS_ACCESS_KEY_ID != ''
    environment:
      name: production
      url: https://mattailor.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME || 'mattailor-production' }} \
            --service ${{ secrets.ECS_SERVICE_NAME || 'mattailor-frontend' }} \
            --force-new-deployment

  # Deploy to GCP Cloud Run (production)
  deploy-gcp-production:
    name: Deploy to GCP Cloud Run (Production)
    runs-on: ubuntu-latest
    needs: [build-and-push, container-scan]
    if: github.event_name == 'release' && secrets.GCP_SA_KEY != ''
    environment:
      name: production
      url: https://mattailor.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy mattailor-frontend \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated

  # Send deployment notifications
  notify-deployment:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-railway-staging, deploy-aws-staging, deploy-gcp-staging, deploy-railway-production, deploy-aws-production, deploy-gcp-production]
    if: always() && (contains(needs.*.result, 'success') || contains(needs.*.result, 'failure'))
    steps:
      - name: Send Slack notification
        if: secrets.SLACK_WEBHOOK_URL != ''
        run: |
          if [[ "${{ contains(needs.*.result, 'success') }}" == "true" ]]; then
            STATUS="✅ Success"
            COLOR="good"
          else
            STATUS="❌ Failed"
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"MatTailor AI Deployment $STATUS\",
                \"text\": \"Deployment completed for commit ${{ github.sha }}\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"${{ github.ref == 'refs/heads/develop' && 'Staging' || 'Production' }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
                ]
              }]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Discord notification
        if: secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          if [[ "${{ contains(needs.*.result, 'success') }}" == "true" ]]; then
            COLOR=65280
            STATUS="✅ Deployment Successful"
          else
            COLOR=16711680
            STATUS="❌ Deployment Failed"
          fi
          
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$STATUS\",
                \"description\": \"MatTailor AI deployment completed\",
                \"color\": $COLOR,
                \"fields\": [
                  {\"name\": \"Environment\", \"value\": \"${{ github.ref == 'refs/heads/develop' && 'Staging' || 'Production' }}\", \"inline\": true},
                  {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\", \"inline\": true}
                ]
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-railway-staging, deploy-aws-staging, deploy-gcp-staging, deploy-railway-production, deploy-aws-production, deploy-gcp-production]
    if: always() && contains(needs.*.result, 'success')
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true